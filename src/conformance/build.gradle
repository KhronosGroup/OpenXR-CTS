// Copyright (c) 2020-2024, The Khronos Group Inc.
//
// SPDX-License-Identifier: Apache-2.0

// Open this directory in Android Studio, or build with Gradle,
// to build the conformance suite.

plugins {
    id 'com.android.application' version '7.4.2'
}


// These next few lines are just to make the version match the OpenXR release.
project.ext.repoRoot = file('../../')
apply from: file('../version.gradle')

def assetDest = layout.buildDir.dir('intermediates/assets')

task copyAssets(type: Copy) {
    // fonts
    from('conformance_test') {
        include '*.otf'
    }

    // sample images
    from('conformance_test/composition_examples') {
        include '*.png'
    }
    from('conformance_test/gltf_examples') {
        include '*.png'
        include '*.glb'
    }
    from('conformance_test/pbr_assets') {
        include '*.png'
    }

    // layer manifests
    from('conformance_test/android_assets') {
        include '**/*.json'
    }

    into assetDest
}

android {
    compileSdk 29
    ndkVersion "21.4.7075529"
    buildToolsVersion = "30.0.3"
    namespace 'org.khronos.openxr.cts'

    defaultConfig {
        applicationId "org.khronos.openxr.cts"
        // for Vulkan, need at least 24
        minSdkVersion 24

        versionName = project.versionOpenXR.toString() + project.versionQualifier
        versionCode = project.versionOpenXR.getVersionCode()

        externalNativeBuild {
            cmake {
                arguments '-DBUILD_TESTS=OFF',
                        '-DBUILD_LOADER=ON',
                        '-DBUILD_CONFORMANCE_TESTS=ON',
                        '-DBUILD_ALL_EXTENSIONS=ON'
                targets 'conformance_test', 'openxr_loader', 'XrApiLayer_runtime_conformance'
            }
        }
        preBuild.dependsOn(copyAssets)
    }
    sourceSets {
        main {
            manifest.srcFile 'platform_specific/AndroidManifest.xml'
            res.srcDirs 'platform_specific/android_resources'
            assets.srcDirs assetDest
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "${project.repoRoot}/CMakeLists.txt"
        }
    }
}
